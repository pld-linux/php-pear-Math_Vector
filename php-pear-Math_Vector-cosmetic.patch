--- ./Math_Vector-0.5.0/VectorOp.php.org	Wed Apr 24 00:04:00 2002
+++ ./Math_Vector-0.5.0/VectorOp.php	Sat Jul 27 20:47:02 2002
@@ -135,14 +135,14 @@
 	 * @access	public
 	 * @param	int	$size	vector size
 	 * @param	int	$index	element to be set at 1
-	 * @return	object	if ($size == 2) Math_Vector2 elseif ($size == 3) Math_Vector3 else Math_Vector, on error Pear_Error
+	 * @return	object	if ($size == 2) Math_Vector2 elseif ($size == 3) Math_Vector3 else Math_Vector, on error PEAR_Error
 	 *
 	 * @see	createZero()
 	 */
 	function createBasis ($size, $index) /*{{{*/
 	{
 		if ($index >= $size)
-			return new Pear_Error("Incorrect index for size: $index >= $size");
+			return new PEAR_Error("Incorrect index for size: $index >= $size");
 		$v = Math_VectorOp::createZero($size);
 		$res =$v->set($index, 1);
 		if (PEAR::isError($res))
@@ -158,7 +158,7 @@
 	 * @access	public
 	 * @param	object	Math_Vector (or subclass)	$v1
 	 * @param	object	Math_Vector (or subclass)	$v2
-	 * @return	object	Math_Vector (or subclass) on success, Pear_Error otherwise
+	 * @return	object	Math_Vector (or subclass) on success, PEAR_Error otherwise
 	 *
 	 * @see 	isVector()
 	 */
@@ -167,12 +167,12 @@
 		if (Math_VectorOp::isVector($v1) && Math_VectorOp::isVector($v2)) {
 			$n = $v1->size();
 			if ($v2->size() != $n)
-				return new Pear_Error("Vectors must of the same size");
+				return new PEAR_Error("Vectors must of the same size");
 			for ($i=0; $i < $n; $i++)
 				$arr[$i] = $v1->get($i) + $v2->get($i);
 			return new Math_Vector($arr);
 		} else {
-			return new Pear_Error("V1 and V2 must be Math_Vector objects");
+			return new PEAR_Error("V1 and V2 must be Math_Vector objects");
 		}
 	}/*}}}*/
 
@@ -183,7 +183,7 @@
 	 * @access	public
 	 * @param	object	Math_Vector (or subclass)	$v1
 	 * @param	object	Math_Vector (or subclass)	$v2
-	 * @return	object	Math_Vector (or subclass) on success, Pear_Error otherwise
+	 * @return	object	Math_Vector (or subclass) on success, PEAR_Error otherwise
 	 *
 	 * @see 	isVector()
 	 */
@@ -192,12 +192,12 @@
 		if (Math_VectorOp::isVector($v1) && Math_VectorOp::isVector($v2)) {
 			$n = $v1->size();
 			if ($v2->size() != $n)
-				return new Pear_Error("Vectors must of the same size");
+				return new PEAR_Error("Vectors must of the same size");
 			for ($i=0; $i < $n; $i++)
 				$arr[$i] = $v1->get($i) - $v2->get($i);
 			return new Math_Vector($arr);
 		} else {
-			return new Pear_Error("V1 and V2 must be Math_Vector objects");
+			return new PEAR_Error("V1 and V2 must be Math_Vector objects");
 		}
 	}/*}}}*/
 
@@ -208,7 +208,7 @@
 	 * @access	public
 	 * @param	object	Math_Vector (or subclass)	$v1
 	 * @param	object	Math_Vector (or subclass)	$v2
-	 * @return	object	Math_Vector (or subclass) on success, Pear_Error otherwise
+	 * @return	object	Math_Vector (or subclass) on success, PEAR_Error otherwise
 	 *
 	 * @see 	isVector()
 	 */
@@ -217,12 +217,12 @@
 		if (Math_VectorOp::isVector($v1) && Math_VectorOp::isVector($v2)) {
 			$n = $v1->size();
 			if ($v2->size() != $n)
-				return new Pear_Error("Vectors must of the same size");
+				return new PEAR_Error("Vectors must of the same size");
 			for ($i=0; $i < $n; $i++)
 				$arr[$i] = $v1->get($i) * $v2->get($i);
 			return new Math_Vector($arr);
 		} else {
-			return new Pear_Error("V1 and V2 must be Math_Vector objects");
+			return new PEAR_Error("V1 and V2 must be Math_Vector objects");
 		}
 	}/*}}}*/
 
@@ -233,7 +233,7 @@
 	 * @access	public
 	 * @param	numeric	$f	scaling factor
 	 * @param	object	Math_Vector (or subclass)	$v
-	 * @return	object	Math_Vector (or subclass) on success, Pear_Error otherwise
+	 * @return	object	Math_Vector (or subclass) on success, PEAR_Error otherwise
 	 *
 	 * @see 	isVector()
 	 */
@@ -245,7 +245,7 @@
 				$arr[$i] = $v->get($i) * $f;
 			return new Math_Vector($arr);
 		} else {
-			return new Pear_Error("Requires a numeric factor and a Math_Vector object");
+			return new PEAR_Error("Requires a numeric factor and a Math_Vector object");
 		}
 	}/*}}}*/
 
@@ -256,7 +256,7 @@
 	 * @access	public
 	 * @param	object	Math_Vector (or subclass)	$v1
 	 * @param	object	Math_Vector (or subclass)	$v2
-	 * @return	object	Math_Vector (or subclass) on success, Pear_Error otherwise
+	 * @return	object	Math_Vector (or subclass) on success, PEAR_Error otherwise
 	 *
 	 * @see 	isVector()
 	 */
@@ -265,16 +265,16 @@
 		if (Math_VectorOp::isVector($v1) && Math_VectorOp::isVector($v2)) {
 			$n = $v1->size();
 			if ($v2->size() != $n)
-				return new Pear_Error("Vectors must of the same size");
+				return new PEAR_Error("Vectors must of the same size");
 			for ($i=0; $i < $n; $i++) {
 				$d = $v2->get($i);
 				if ($d == 0)
-					return new Pear_Error("Division by zero: Element $i in V2 is zero");
+					return new PEAR_Error("Division by zero: Element $i in V2 is zero");
 				$arr[$i] = $v1->get($i) / $d;
 			}
 			return new Math_Vector($arr);
 		} else {
-			return new Pear_Error("V1 and V2 must be Math_Vector objects");
+			return new PEAR_Error("V1 and V2 must be Math_Vector objects");
 		}
 	}/*}}}*/
 
@@ -284,7 +284,7 @@
 	 * @access	public
 	 * @param	object	Math_Vector2 or MathVector3 (or subclass)	$v1
 	 * @param	object	Math_Vector2 or MathVector3 (or subclass)	$v2
-	 * @return	mixed	the dot product (float) on success, a Pear_Error object otherwise
+	 * @return	mixed	the dot product (float) on success, a PEAR_Error object otherwise
 	 *
 	 * @see 	isVector2()
 	 * @see		isVector3()
@@ -299,7 +299,7 @@
 					 $v1->getY() * $v2->getY() +
 					 $v1->getZ() * $v2->getZ() );
 		else
-			return new Pear_Error("Vectors must be both of the same type");
+			return new PEAR_Error("Vectors must be both of the same type");
 	}/*}}}*/
 
 	/**
@@ -308,7 +308,7 @@
 	 * @access	public
 	 * @param	object	Math_Vector3 (or subclass)	$v1
 	 * @param	object	Math_Vector3 (or subclass)	$v2
-	 * @return	object	the cross product vector (Math_Vector3) on success, a Pear_Error object otherwise
+	 * @return	object	the cross product vector (Math_Vector3) on success, a PEAR_Error object otherwise
 	 *
 	 * @see		isVector3()
 	 */
@@ -320,7 +320,7 @@
 			$arr[2] = $v1->getX() * $v2->getY() - $v1->getY() * $v2->getX();
 			return new Math_Vector3($arr);
 		} else {
-			return new Pear_Error("Vectors must be both of the same type");
+			return new PEAR_Error("Vectors must be both of the same type");
 		}
 	}
 
@@ -331,7 +331,7 @@
 	 * @param	object	Math_Vector3 (or subclass)	$v1
 	 * @param	object	Math_Vector3 (or subclass)	$v2
 	 * @param	object	Math_Vector3 (or subclass)	$v3
-	 * @return	mixed	the triple scalar product (float) on success, a Pear_Error object otherwise
+	 * @return	mixed	the triple scalar product (float) on success, a PEAR_Error object otherwise
 	 *
 	 * @see		isVector3()
 	 * @see		dotProduct()
@@ -344,7 +344,7 @@
 			&& Math_VectorOp::isVector3($v3))
 			return Math_VectorOp::dotProduct($v1,Math_VectorOp::crossProduct($v2, $v3));
 		else
-			return Pear_Error("All three vectors must be of the same type");
+			return PEAR_Error("All three vectors must be of the same type");
 	}/*}}}*/
 
 	/**
@@ -353,7 +353,7 @@
 	 * @access	public
 	 * @param	object	Math_Vector2 or MathVector3 (or subclass)	$v1
 	 * @param	object	Math_Vector2 or MathVector3 (or subclass)	$v2
-	 * @return	mixed	the angle between vectors (float, in radians) on success, a Pear_Error object otherwise
+	 * @return	mixed	the angle between vectors (float, in radians) on success, a PEAR_Error object otherwise
 	 *
 	 * @see 	isVector2()
 	 * @see		isVector3()
@@ -367,7 +367,7 @@
 			$v2->normalize();
 			return acos( Math_VectorOp::dotProduct($v1,$v2) );
 		} else {
-			return new Pear_Error("Vectors must be both of the same type");
+			return new PEAR_Error("Vectors must be both of the same type");
 		}
 	}/*}}}*/
 
--- ./Math_Vector-0.5.0/Vector3.php.org	Wed Apr 24 00:04:00 2002
+++ ./Math_Vector-0.5.0/Vector3.php	Sat Jul 27 20:47:58 2002
@@ -68,7 +68,7 @@
 	 *
 	 * @access	public
 	 * @param	numeric	$val	the value for the Y component
-	 * @return	mixed	true on success, Pear_Error object otherwise
+	 * @return	mixed	true on success, PEAR_Error object otherwise
 	 */
 	function setX($val)/*{{{*/
 	{
@@ -91,7 +91,7 @@
 	 *
 	 * @access	public
 	 * @param	numeric	$val	the value for the Y component
-	 * @return	mixed	true on success, Pear_Error object otherwise
+	 * @return	mixed	true on success, PEAR_Error object otherwise
 	 */
 	function setY($val)/*{{{*/
 	{
@@ -114,7 +114,7 @@
 	 *
 	 * @access	public
 	 * @param	numeric	$val	the value for the Y component
-	 * @return	mixed	true on success, Pear_Error object otherwise
+	 * @return	mixed	true on success, PEAR_Error object otherwise
 	 */
 	function setZ($val)/*{{{*/
 	{
--- ./Math_Vector-0.5.0/Tuple.php.org	Wed Apr 24 00:04:00 2002
+++ ./Math_Vector-0.5.0/Tuple.php	Sat Jul 27 20:48:44 2002
@@ -46,7 +46,7 @@
 	 *
 	 * @param	array	$data	array of numbers
 	 * @access	public
-	 * @return	object	Math_Tuple (or Pear_Error on error)
+	 * @return	object	Math_Tuple (or PEAR_Error on error)
 	 */
 	function Math_Tuple ($data) /*{{{*/
 	{
@@ -85,7 +85,7 @@
 	 * @access	public
 	 * @param	integer	$elindex	element index
 	 * @param	numeric	$elvalue	element value
-	 * @return	mixed	true if successful, Pear_Error object otherwise
+	 * @return	mixed	true if successful, PEAR_Error object otherwise
 	 */
 	function setElement ($elindex, $elvalue) /*{{{*/
 	{
@@ -101,7 +101,7 @@
 	 *
 	 * @access	public
 	 * @param	numeric	$elvalue	element value
-	 * @return	mixed	index of appended element on success, Pear_Error object otherwise
+	 * @return	mixed	index of appended element on success, PEAR_Error object otherwise
 	 */
 	function addElement ($elvalue) /*{{{*/
 	{
@@ -117,7 +117,7 @@
 	 *
 	 * @access public
 	 * @param	integer $elindex	element index
-	 * @return	mixed	true on success, Pear_Error object otherwise
+	 * @return	mixed	true on success, PEAR_Error object otherwise
 	 */
 	function delElement ($elindex) /*{{{*/
 	{
@@ -134,7 +134,7 @@
 	 *
 	 * @access	public
 	 * @param	integer	$elindex	element index
-	 * @return	mixed	numeric on success, Pear_Error otherwise
+	 * @return	mixed	numeric on success, PEAR_Error otherwise
 	 */
 	function getElement($elindex) /*{{{*/
 	{
--- ./Math_Vector-0.5.0/Vector2.php.org	Wed Apr 24 00:04:00 2002
+++ ./Math_Vector-0.5.0/Vector2.php	Sat Jul 27 20:49:15 2002
@@ -68,7 +68,7 @@
 	 *
 	 * @access	public
 	 * @param	numeric	$val	the value for the Y component
-	 * @return	mixed	true on success, Pear_Error object otherwise
+	 * @return	mixed	true on success, PEAR_Error object otherwise
 	 */
 	function setX($val)/*{{{*/
 	{
@@ -91,7 +91,7 @@
 	 *
 	 * @access	public
 	 * @param	numeric	$val	the value for the Y component
-	 * @return	mixed	true on success, Pear_Error object otherwise
+	 * @return	mixed	true on success, PEAR_Error object otherwise
 	 */
 	function setY($val)/*{{{*/
 	{
--- ./Math_Vector-0.5.0/Vector.php.org	Wed Apr 24 00:04:00 2002
+++ ./Math_Vector-0.5.0/Vector.php	Sat Jul 27 20:50:08 2002
@@ -48,7 +48,7 @@
 	 *
 	 * @param	mixed	$data	a Math_Tuple object, a Math_Vetctor object, or an array of numeric data
 	 * @access	public
-	 * @return	object	Math_Vector (or Pear_Error on error)
+	 * @return	object	Math_Vector (or PEAR_Error on error)
 	 */
 	function Math_Vector($data) /*{{{*/
 	{
@@ -180,7 +180,7 @@
 	 *
 	 * @access	public
 	 * @param	float	$f	scaling factor
-	 * @return	mixed	void on success, a Pear_Error object otherwise
+	 * @return	mixed	void on success, a PEAR_Error object otherwise
 	 */
 	function scale($f) /*{{{*/
 	{
@@ -190,7 +190,7 @@
 			for ($i=0; $i < $n; $i++)
 				$this->set($i, $this->get($i) * $f);
 		} else {
-			return new Pear_Error("Requires a numeric factor and a Math_Vector object");
+			return new PEAR_Error("Requires a numeric factor and a Math_Vector object");
 		}
 	}/*}}}*/
 
@@ -200,12 +200,12 @@
 	 * @access	public
 	 * @param	integer	$i	the index of the element
 	 * @param	numeric	$value	the value to assign to the element
-	 * @return	mixed	true on success, a Pear_Error object otherwise
+	 * @return	mixed	true on success, a PEAR_Error object otherwise
 	 */
 	function set($i, $value) /*{{{*/
 	{
 		$res = $this->tuple->setElement($i, $value);
-		if (Pear::isError($res))
+		if (PEAR::isError($res))
 			return $res;
 		else
 			return true;
@@ -216,7 +216,7 @@
 	 *
 	 * @access	public
 	 * @param	integer	$i	the index of the element
-	 * @return	mixed	the element value (numeric) on success, a Pear_Error object otherwise
+	 * @return	mixed	the element value (numeric) on success, a PEAR_Error object otherwise
 	 */
 	function get($i) {/*{{{*/
 		$res = $this->tuple->getElement($i);
@@ -241,10 +241,10 @@
 						$vector->tuple->getElement($i)), 2);
 				return sqrt($sum);
 			} else {
-				return new Pear_Error("Vector has to be of the same size");
+				return new PEAR_Error("Vector has to be of the same size");
 			}
 		else
-			return new Pear_Error("Wrong parameter type, expecting a Math_Vector object");
+			return new PEAR_Error("Wrong parameter type, expecting a Math_Vector object");
 	}/*}}}*/
 
 	/**
